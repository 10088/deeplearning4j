on:
  workflow_dispatch:
    inputs:
      buildThreads:
        description: 'Build threads for libnd4j. Used to control memory usage of builds.'
        required: true
        default: 1


      deployToReleaseStaging:
        description: 'Whether to deploy to release staging or not.'
        required: false
        default: 0

      releaseVersion:
        description: 'Release version target'
        required: false
        default: 1.0.0-M1

      snapshotVersion:
        description: 'Snapshot version target'
        required: false
        default: 1.0.0-SNAPSHOT

      releaseRepoId:
        description: 'Release repository id'
        required: false
        default:

      serverId:
        description: 'Server id to publish to'
        required: false
        default: ossrh

      runsOn:
        description: 'Runs on:'
        required: false
        default: macos-10.15

      mvnFlags:
        description: "Extra maven flags (must escape input yourself if used"
        required: false
        default: -pl \":libnd4j,:nd4j-native\"

      libnd4jUrl:
        description: 'Sets a libnd4j download url for this build. LIBND4J_HOME will automatically be set. Should be used when only needing to build other modules.'
        required: false
        default:



      debug_enabled:
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false

jobs:
  # Wait for up to a minute for previous run to complete, abort if not done by then
#  pre-ci:
#    runs-on: ubuntu-latest
#    timeout-minutes: 1
#    steps:
#      - name: 'Block Concurrent Executions'
#        uses: softprops/turnstyle@v1
#        with:
#          poll-interval-seconds: 10
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  mac-x86_64:
    #needs: pre-ci
    strategy:
      fail-fast: false
      matrix:
        helper: [ onednn,"" ]
        extension: [ avx2,avx512,"" ]
    runs-on: ${{ github.event.inputs.runsOn }}
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.8.0
        with:
          access_token: ${{ github.token }}
      - uses: actions/checkout@v2
      - name: Set mvn build command based on matrix
        shell: bash
        run: |
              command="mvn ${{ github.event.inputs.mvnFlags }}  -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.http.retryHandler.count=3   -Possrh   -DskipTestResourceEnforcement=true  -Dmaven.javadoc.failOnError=false -Djavacpp.platform=macosx-x86_64 -Dlibnd4j.chip=cpu -Pcpu  --also-make  --batch-mode deploy -DskipTests"
              if [ ${{ matrix.helper }} != '' ] && [ ${{ matrix.extension }} != '' ]; then
                  mvn_ext=" -Dlibnd4j.helper=${{ matrix.helper }} -Dlibnd4j.extension=${{ matrix.extension }} -Djavacpp.platform.extension=-${{ matrix.helper }}-${{ matrix.extension }}"
              elif [ ${{ matrix.helper }} != '' ]; then
                  mvn_ext=" -Dlibnd4j.helper=${{ matrix.helper }} -Dlibnd4j.extension=${{ matrix.helper }} -Djavacpp.platform.extension=-${{ matrix.helper }}"
              elif [ ${{ matrix.extension }} != '' ]; then
                 mvn_ext=" -Dlibnd4j.extension=${{ matrix.extension }} -Djavacpp.platform.extension=-${{ matrix.extension }}"
              else
                  mvn_ext=""
              fi
              command="${command} ${mvn_ext}"
              echo "Setting command for helper ${{ matrix.helper }} and extension ${{ matrix.extension }} to ${command}"
              echo "COMMAND=${command}" >> $GITHUB_ENV

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Set up Java for publishing to OSSRH
        uses: actions/setup-java@v2
        with:
          java-version: 8
          distribution: 'zulu'
          server-id: ${{ github.event.inputs.serverId }}
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.SONATYPE_GPG_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE


      - name: Update path for gnu sed
        shell: bash
        run: |
             brew install gpg1 gnu-sed unzip  ccache gcc swig autoconf-archive automake cmake libomp libtool libusb ant maven nasm xz pkg-config sdl gpg bison flex perl ragel binutils gradle gmp isl libmpc mpfr wget python
             echo "$(brew --prefix)/opt/gnu-sed/libexec/gnubin" >> $GITHUB_PATH

      - name: Import GPG Key
        uses: crazy-max/ghaction-import-gpg@v1
        env:
            GPG_PRIVATE_KEY: ${{ secrets.SONATYPE_GPG_KEY }}
            PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}

      - name: Setup libnd4j home if a download url is specified
        shell: bash
        run: |
            echo "LIBND4J_HOME=${GITHUB_WORKSPACE}/libnd4j_home/libnd4j/" >> "$GITHUB_ENV"
            mkdir "${GITHUB_WORKSPACE}/openblas_home"
            cd "${GITHUB_WORKSPACE}/openblas_home"
            wget https://repo1.maven.org/maven2/org/bytedeco/openblas/0.3.13-1.5.5/openblas-0.3.13-1.5.5-macosx-x86_64.jar
            unzip openblas-0.3.13-1.5.5-macosx-x86_64.jar
            cd ..
            cp ${GITHUB_WORKSPACE}/openblas_home/org/bytedeco/openblas/macosx-x86_64/libopenblas.0.dylib  ${GITHUB_WORKSPACE}/openblas_home/org/bytedeco/openblas/macosx-x86_64/libopenblas.dylib
            echo "OPENBLAS_PATH=${GITHUB_WORKSPACE}/openblas_home/org/bytedeco/openblas/macosx-x86_64/" >> "$GITHUB_ENV"

        if: ${{ github.event.inputs.libnd4jUrl != '' }}

      - name: Build and install
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PUBLISH_TO: ossrh
          MAVEN_GPG_KEY: ${{ secrets.SONATYPE_GPG_KEY }}
          MAVEN_USERNAME: ${{ secrets.SONATYPE_USER_1 }}
          MAVEN_PASSWORD: ${{ secrets.SONATYPE_USER1_PASS }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.PACKAGES_GPG_PASS }}
          PERFORM_RELEASE: ${{ github.event.inputs.deployToReleaseStaging }}
          RELEASE_VERSION: ${{ github.event.inputs.releaseVersion }}
          SNAPSHOT_VERSION: ${{ github.event.inputs.snapshotVersion }}
          RELEASE_REPO_ID: ${{ github.event.inputs.releaseRepoId }}
          MODULES: ${{ github.event.inputs.mvnFlags }}
          LIBND4J_URL: ${{ github.event.inputs.libnd4jUrl }}
          MAVEN_OPTS: "-Xmx2g"
          HELPER: ${{ matrix.helper }}
          EXTENSION: ${{ matrix.extension }}


        run: |
          gpg --version
          gpg1 --version
          brew list
          brew list --cask
          # download libnd4j from a url and set it up if LIBND4J_URL is defined
          bash ./bootstrap-libnd4j-from-url.sh
          if [ "$PERFORM_RELEASE" == 1 ]; then
                    echo "Performing release with command ${COMMAND}"
                    bash ${GITHUB_WORKSPACE}/release-specified-component.sh  "${RELEASE_VERSION}" "${SNAPSHOT_VERSION}" "${RELEASE_REPO_ID}" "${COMMAND}"

          else
                  echo "Running build and deploying to snapshots"
                  eval "${COMMAND}"
          fi

on:
  push:
  pull_request:
jobs:
  build_and_test_cross_platform:
    # The host should always be linux
    runs-on: ubuntu-18.04
    name: Build on ${{ matrix.distro }} ${{ matrix.arch }}

    # Run steps on a matrix of 2 arch/distro combinations
    strategy:
      matrix:
        include:
          - arch: aarch64
            distro: ubuntu18.04
          - arch: ppc64le
            distro: ubuntu18.04


    steps:
      - uses: actions/checkout@v2
      - uses: uraimo/run-on-arch-action@v2.0.8
        name: Build and test with ${{ matrix.arch }} ${{ matrix.distro }}
        id: build
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}



          # Pass some environment variables to the container
          env: | # YAML, but pipe character is necessary
            DEBIAN_FRONTEND: noninteractive
            M2_HOME: /opt/maven

          # The shell to run commands with in the container
          shell: /bin/sh

          # Install some dependencies in the container. This speeds up builds if
          # you are also using githubToken. Any dependencies installed here will
          # be part of the container image that gets cached, so subsequent
          # builds don't have to re-install them. The image layer is cached
          # publicly in your project's package repository, so it is vital that
          # no secrets are present in the container state or logs.
          install: |
            rm -rf /var/lib/apt/lists/*
            apt-get -qqy update && \
            apt-get -y --no-install-recommends install \
                                                  wget \
                                                  curl \
                                                  unzip \
                                                  apt-transport-https gnupg \
                                                  ca-certificates \
                                                  software-properties-common \
                                                  git \
                                                  build-essential \
                                                  gnupg-agent \
                                                  dirmngr \
                                                 default-jre-headless openjdk-8-jdk-headless \
                                                  libssl-dev \
                                                   curl \
                                                     ca-certificates \
                                                  libgtk2.0-dev && \
                                               apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \
                                               apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*






                    mkdir -p "/opt/maven" && \
                    curl -fsSL http://apache.osuosl.org/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz | \
                                      tar -xzC "/opt/maven" --strip-components=1

                    curl -fsSL https://cmake.org/files/v3.19/cmake-3.19.0.tar.gz \
                                  | tar xz && \
                                  cd cmake-3.19.0 && \
                                  ./configure --prefix=/opt/cmake && \
                                  make -j2 && \
                                  make install && \
                                  cd .. && \
                                  rm -r cmake-3.19.0

                    curl -fsSL https://github.com/google/protobuf/releases/download/v3.5.1/protobuf-cpp-3.5.1.tar.gz \
                                  | tar xz && \
                                  cd protobuf-3.5.1 && \
                                  ./configure --prefix=/opt/protobuf && \
                                  make -j2 && \
                                  make install && \
                                  cd .. && \
                                  rm -rf protobuf-3.5.1

                    wget https://github.com/KonduitAI/dl4j-test-resources/archive/master.zip && unzip master.zip && cd dl4j-test-resources-master && mvn clean

          run: |
            echo "Begin run"
            echo "/opt/cmake/bin" >> $GITHUB_PATH
            echo "/opt/protobuf/bin" >> $GITHUB_PATH
            echo "/opt/maven/bin" >> $GITHUB_PATH

              echo "RUNNING ARCH ${{ matrix.arch }}"
                       case "${{ matrix.arch }}" in
                         armv7)
                             echo "JAVA_HOME=/usr/lib/jvm/java-8-openjdk-armhf/jre" >> $GITHUB_ENV
                             ;;
                           aarch64)
                             echo "JAVA_HOME=/usr/lib/jvm/java-8-openjdk-arm64/jre" >> $GITHUB_ENV
                             ;;
                         ppc64le)
                               echo "JAVA_HOME=/usr/lib/jvm/java-8-openjdk-ppc64el/jre" >> $GITHUB_ENV
                             ;;
                esac
                export PATH="/opt/cmake/bin:/opt/maven/bin:/opt/protobuf/bin:$PATH"

               mvn -Ptestresources -Ptest-nd4j-native -Dlibnd4j.chip=cpu clean test


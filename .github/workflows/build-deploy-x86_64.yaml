on:
 push:
jobs:
  linux-x86_64:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: Run tests on linux-x86_64
        shell: bash
        env:
          DEBIAN_FRONTEND: noninteractive
          M2_HOME: /opt/maven
          JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64/jre
        run: |

          echo "/opt/cmake/bin" >> $GITHUB_PATH
          echo "/opt/protobuf/bin" >> $GITHUB_PATH
          echo "/opt/maven/bin" >> $GITHUB_PATH
          sudo apt-get -yq update && \
                             sudo apt-get -y --no-install-recommends install \
                                 wget \
                                 curl \
                                 unzip \
                                 apt-transport-https gnupg \
                                 ca-certificates \
                                 software-properties-common \
                                 git \
                                 build-essential \
                                 gnupg-agent \
                                 dirmngr \
                                 default-jre-headless \
                              openjdk-8-jdk-headless \
                                 libssl-dev \
                                  curl \
                                    ca-certificates \
                                 libgtk2.0-dev

           mkdir -p /opt/maven && \
           curl -fsSL http://apache.osuosl.org/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz | \
                             tar -xzC /opt/maven --strip-components=1
           /opt/maven/bin/mvn --version
           curl -fsSL https://cmake.org/files/v3.19/cmake-3.19.0.tar.gz \
                         | tar xz && \
                         cd cmake-3.19.0 && \
                         ./configure --prefix=/opt/cmake && \
                         make -j2 && \
                         make install && \
                         cd .. && \
                         rm -r cmake-3.19.0

           curl -fsSL https://github.com/google/protobuf/releases/download/v3.5.1/protobuf-cpp-3.5.1.tar.gz \
                         | tar xz && \
                         cd protobuf-3.5.1 && \
                         ./configure --prefix=/opt/protobuf && \
                         make -j2 && \
                         make install && \
                         cd .. && \
                         rm -rf protobuf-3.5.1

           wget https://github.com/KonduitAI/dl4j-test-resources/archive/master.zip && unzip master.zip
          echo "Extracted test resources"
          echo "Verifying programs on path. Path is $PATH"
          export PATH="/opt/cmake/bin:/opt/maven/bin:/opt/protobuf/bin:$PATH"
          echo "Path post update is $PATH. Maven is at `which mvn` cmake is at `which cmake` protoc is at `which protoc`"
          mvn --version
          cmake --version
          protoc --version
          cd dl4j-test-resources-master && mvn clean install -DskipTests && cd ..
          mvn -Ptestresources -Ptest-nd4j-native -Dlibnd4j.chip=cpu clean install -DskipTests

  linux-x86_64-cuda_11-0:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: Run tests on linux-x86_64
        shell: bash
        env:
          DEBIAN_FRONTEND: noninteractive
          M2_HOME: /opt/maven
          JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64/jre
        run: |

          echo "/opt/cmake/bin" >> $GITHUB_PATH
          echo "/opt/protobuf/bin" >> $GITHUB_PATH
          echo "/opt/maven/bin" >> $GITHUB_PATH
          sudo apt-get -yq update && \
                             sudo apt-get -y --no-install-recommends install \
                                 wget \
                                 curl \
                                 unzip \
                                 apt-transport-https gnupg \
                                 ca-certificates \
                                 software-properties-common \
                                 git \
                                 build-essential \
                                 gnupg-agent \
                                 dirmngr \
                                 default-jre-headless \
                              openjdk-8-jdk-headless \
                                 libssl-dev \
                                  curl \
                                    ca-certificates \
                                 libgtk2.0-dev

           mkdir -p /opt/maven && \
           curl -fsSL http://apache.osuosl.org/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz | \
                             tar -xzC /opt/maven --strip-components=1
           /opt/maven/bin/mvn --version
           curl -fsSL https://cmake.org/files/v3.19/cmake-3.19.0.tar.gz \
                         | tar xz && \
                         cd cmake-3.19.0 && \
                         ./configure --prefix=/opt/cmake && \
                         make -j2 && \
                         make install && \
                         cd .. && \
                         rm -r cmake-3.19.0

           curl -fsSL https://github.com/google/protobuf/releases/download/v3.5.1/protobuf-cpp-3.5.1.tar.gz \
                         | tar xz && \
                         cd protobuf-3.5.1 && \
                         ./configure --prefix=/opt/protobuf && \
                         make -j2 && \
                         make install && \
                         cd .. && \
                         rm -rf protobuf-3.5.1

          wget https://github.com/KonduitAI/dl4j-test-resources/archive/master.zip && unzip master.zip
          echo "Extracted test resources"
           echo Installing CUDA, cuDNN, etc
          curl -LO https://developer.download.nvidia.com/compute/cuda/11.0.3/local_installers/cuda_11.0.3_450.51.06_linux.run
          curl -LO https://developer.download.nvidia.com/compute/redist/cudnn/v8.1.0/cudnn-11.2-linux-x64-v8.1.0.77.tgz
          curl -LO https://developer.download.nvidia.com/compute/redist/nccl/v2.8/nccl_2.8.4-1+cuda11.0.3_x86_64.txz
          chmod +x cuda_11.0.3_450.51.06_linux.run && ./cuda_11.0.3_450.51.06_linux.run  --silent --toolkit
          ln -sf /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/libcuda.so
          ln -sf /usr/local/cuda/lib64/stubs/libnvidia-ml.so /usr/local/cuda/lib64/libnvidia-ml.so
          tar -hxvf $CUDNN -C /usr/local/
          tar -hxvf $NCCL --strip-components=1 -C /usr/local/cuda/
          mv /usr/local/cuda/lib/* /usr/local/cuda/lib64/
          # Work around issues with CUDA 10.2/11.x
          mv /usr/include/cublas* /usr/include/nvblas* /usr/local/cuda/include/ || true
          mv /usr/lib64/libcublas* /usr/lib64/libnvblas* /usr/local/cuda/lib64/ || true
          for f in /usr/local/cuda/lib64/*.so.10; do ln -s $f $f.2; done
          for f in /usr/local/cuda/lib64/*.so.10; do ln -s $f ${f:0:${#f}-1}1; done
          ln -s libcudart.so.11.0 /usr/local/cuda/lib64/libcudart.so.11.1
          ln -s libcudart.so.11.0 /usr/local/cuda/lib64/libcudart.so.11.2
          cp /usr/local/cuda/lib64/stubs/libcuda.so /usr/lib64/libcuda.so
          cp /usr/local/cuda/lib64/stubs/libcuda.so /usr/lib64/libcuda.so.1
          cp /usr/local/cuda/lib64/stubs/libnvidia-ml.so /usr/lib64/libnvidia-ml.so
          cp /usr/local/cuda/lib64/stubs/libnvidia-ml.so /usr/lib64/libnvidia-ml.so.1
          # Remove downloaded archives and unused libraries to avoid running out of disk space
          rm -f *.rpm *.tgz *.txz *.tar.*
          rm -f $(find /usr/local/cuda/ -name '*.a' -and -not -name libcudart_static.a -and -not -name libcudadevrt.a)
          echo "Verifying programs on path. Path is $PATH"
          export PATH="/opt/cmake/bin:/opt/maven/bin:/opt/protobuf/bin:/usr/local/cuda/bin:$PATH"
          echo "Path post update is $PATH. Maven is at `which mvn` cmake is at `which cmake` protoc is at `which protoc`"
          mvn --version
          cmake --version
          protoc --version
          cd dl4j-test-resources-master && mvn clean install -DskipTests && cd ..
          mvn -Ptestresources -Ptest-nd4j-cuda -Dlibnd4j.chip=cuda clean install -DskipTests

  linux-x86_64-cuda-11-2:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: Run tests on linux-x86_64
        shell: bash
        env:
          DEBIAN_FRONTEND: noninteractive
          M2_HOME: /opt/maven
          JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64/jre
        run: |

          echo "/opt/cmake/bin" >> $GITHUB_PATH
          echo "/opt/protobuf/bin" >> $GITHUB_PATH
          echo "/opt/maven/bin" >> $GITHUB_PATH
          sudo apt-get -yq update && \
                             sudo apt-get -y --no-install-recommends install \
                                 wget \
                                 curl \
                                 unzip \
                                 apt-transport-https gnupg \
                                 ca-certificates \
                                 software-properties-common \
                                 git \
                                 build-essential \
                                 gnupg-agent \
                                 dirmngr \
                                 default-jre-headless \
                              openjdk-8-jdk-headless \
                                 libssl-dev \
                                  curl \
                                    ca-certificates \
                                 libgtk2.0-dev

           mkdir -p /opt/maven && \
           curl -fsSL http://apache.osuosl.org/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz | \
                             tar -xzC /opt/maven --strip-components=1
           /opt/maven/bin/mvn --version
           curl -fsSL https://cmake.org/files/v3.19/cmake-3.19.0.tar.gz \
                         | tar xz && \
                         cd cmake-3.19.0 && \
                         ./configure --prefix=/opt/cmake && \
                         make -j2 && \
                         make install && \
                         cd .. && \
                         rm -r cmake-3.19.0

           curl -fsSL https://github.com/google/protobuf/releases/download/v3.5.1/protobuf-cpp-3.5.1.tar.gz \
                         | tar xz && \
                         cd protobuf-3.5.1 && \
                         ./configure --prefix=/opt/protobuf && \
                         make -j2 && \
                         make install && \
                         cd .. && \
                         rm -rf protobuf-3.5.1

          wget https://github.com/KonduitAI/dl4j-test-resources/archive/master.zip && unzip master.zip
          echo "Extracted test resources"
           echo Installing CUDA, cuDNN, etc
          curl -LO https://developer.download.nvidia.com/compute/cuda/11.2.1/local_installers/cuda_11.2.1_460.32.03_linux.run
          curl -LO https://developer.download.nvidia.com/compute/redist/cudnn/v8.1.0/cudnn-11.2-linux-x64-v8.1.0.77.tgz
          curl -LO https://developer.download.nvidia.com/compute/redist/nccl/v2.8/nccl_2.8.4-1+cuda11.2_x86_64.txz
          chmod +x cuda_11.2.1_460.32.03_linux.run && ./cuda_11.2.1_460.32.03_linux.run --silent --toolkit
          ln -sf /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/libcuda.so
          ln -sf /usr/local/cuda/lib64/stubs/libnvidia-ml.so /usr/local/cuda/lib64/libnvidia-ml.so
          tar -hxvf $CUDNN -C /usr/local/
          tar -hxvf $NCCL --strip-components=1 -C /usr/local/cuda/
          mv /usr/local/cuda/lib/* /usr/local/cuda/lib64/
          # Work around issues with CUDA 10.2/11.x
          mv /usr/include/cublas* /usr/include/nvblas* /usr/local/cuda/include/ || true
          mv /usr/lib64/libcublas* /usr/lib64/libnvblas* /usr/local/cuda/lib64/ || true
          for f in /usr/local/cuda/lib64/*.so.10; do ln -s $f $f.2; done
          for f in /usr/local/cuda/lib64/*.so.10; do ln -s $f ${f:0:${#f}-1}1; done
          ln -s libcudart.so.11.0 /usr/local/cuda/lib64/libcudart.so.11.1
          ln -s libcudart.so.11.0 /usr/local/cuda/lib64/libcudart.so.11.2
          cp /usr/local/cuda/lib64/stubs/libcuda.so /usr/lib64/libcuda.so
          cp /usr/local/cuda/lib64/stubs/libcuda.so /usr/lib64/libcuda.so.1
          cp /usr/local/cuda/lib64/stubs/libnvidia-ml.so /usr/lib64/libnvidia-ml.so
          cp /usr/local/cuda/lib64/stubs/libnvidia-ml.so /usr/lib64/libnvidia-ml.so.1
          # Remove downloaded archives and unused libraries to avoid running out of disk space
          rm -f *.rpm *.tgz *.txz *.tar.*
          rm -f $(find /usr/local/cuda/ -name '*.a' -and -not -name libcudart_static.a -and -not -name libcudadevrt.a)
          echo "Verifying programs on path. Path is $PATH"
          export PATH="/opt/cmake/bin:/opt/maven/bin:/opt/protobuf/bin::/usr/local/cuda/bin:$PATH"
          echo "Path post update is $PATH. Maven is at `which mvn` cmake is at `which cmake` protoc is at `which protoc`"
          mvn --version
          cmake --version
          protoc --version
          cd dl4j-test-resources-master && mvn clean install -DskipTests && cd ..
          mvn -Ptestresources -Ptest-nd4j-cuda -Dlibnd4j.chip=cuda clean install -DskipTests

  android-x86_64:
      runs-on: ubuntu-18.04
      steps:
        - uses: actions/checkout@v2
        - name: Run tests on linux-x86_64
          shell: bash
          env:
            DEBIAN_FRONTEND: noninteractive
            M2_HOME: /opt/maven
            JAVA_HOME: /usr/lib/jvm/java-8-openjdk-amd64/jre
          run: |

            echo "/opt/cmake/bin" >> $GITHUB_PATH
            echo "/opt/protobuf/bin" >> $GITHUB_PATH
            echo "/opt/maven/bin" >> $GITHUB_PATH
            sudo apt-get -yq update && \
                               sudo apt-get -y --no-install-recommends install \
                                   wget \
                                   curl \
                                   unzip \
                                   apt-transport-https gnupg \
                                   ca-certificates \
                                   software-properties-common \
                                   git \
                                   build-essential \
                                   gnupg-agent \
                                   dirmngr \
                                   default-jre-headless \
                                openjdk-8-jdk-headless \
                                   libssl-dev \
                                    curl \
                                      ca-certificates \
                                   libgtk2.0-dev

             mkdir -p /opt/maven && \
             curl -fsSL http://apache.osuosl.org/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz | \
                               tar -xzC /opt/maven --strip-components=1
             /opt/maven/bin/mvn --version
             curl -fsSL https://cmake.org/files/v3.19/cmake-3.19.0.tar.gz \
                           | tar xz && \
                           cd cmake-3.19.0 && \
                           ./configure --prefix=/opt/cmake && \
                           make -j2 && \
                           make install && \
                           cd .. && \
                           rm -r cmake-3.19.0

             curl -fsSL https://github.com/google/protobuf/releases/download/v3.5.1/protobuf-cpp-3.5.1.tar.gz \
                           | tar xz && \
                           cd protobuf-3.5.1 && \
                           ./configure --prefix=/opt/protobuf && \
                           make -j2 && \
                           make install && \
                           cd .. && \
                           rm -rf protobuf-3.5.1

            curl -s http://dl.google.com/android/repository/android-ndk-r18b-linux-x86_64.zip -o android-ndk-r18b-linux-x86_64.zip && \
            unzip -q android-ndk-r18b-linux-x86_64.zip -d /opt && \
            rm -f android-ndk-r18b-linux-x86_64.zip

             wget https://github.com/KonduitAI/dl4j-test-resources/archive/master.zip && unzip master.zip
            echo "Extracted test resources"
            echo "Verifying programs on path. Path is $PATH"
            export PATH="/opt/cmake/bin:/opt/maven/bin:/opt/protobuf/bin:$PATH"
            echo "Path post update is $PATH. Maven is at `which mvn` cmake is at `which cmake` protoc is at `which protoc`"
            mvn --version
            cmake --version
            protoc --version
            cd dl4j-test-resources-master && mvn clean install -DskipTests && cd ..
            mvn -Ptestresources-Djavacpp.platform=android-x86_64 -libnd4j.platform=android-x86_64 -Ptest-nd4j-native -Dlibnd4j.chip=cpu clean install -DskipTests

  windows-x86_64:
      runs-on: windows-2019
      steps:
        - name: Install and run tests
          shell: cmd
          run: |
            echo Installing MSYS2
            C:\msys64\usr\bin\bash -lc "pacman -S --needed --noconfirm base-devel git tar pkg-config unzip p7zip zip autoconf autoconf-archive automake make patch gnupg wget"
            C:\msys64\usr\bin\bash -lc "pacman -S --needed --noconfirm mingw-w64-x86_64-nasm mingw-w64-x86_64-toolchain mingw-w64-x86_64-libtool mingw-w64-x86_64-gcc mingw-w64-i686-gcc mingw-w64-x86_64-gcc-fortran mingw-w64-i686-gcc-fortran mingw-w64-x86_64-libwinpthread-git mingw-w64-i686-libwinpthread-git mingw-w64-x86_64-SDL mingw-w64-i686-SDL mingw-w64-x86_64-protobuf mingw-w64-x86_64-ragel"
            set "PATH=C:\msys64\usr\bin;%PATH%"
            echo "Installing Windows SDK 8.1"
            wget -O  sdksetup.exe https://go.microsoft.com/fwlink/p/?LinkId=323507
            .\sdksetup.exe /features OptionId.WindowsDesktopSoftwareDevelopmentKit OptionId.NetFxSoftwareDevelopmentKit /quiet
            echo "Removing broken stuff from WSL and MSYS2"
            call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
            set MSYSTEM=MINGW64
            wget -O master.zip https://github.com/KonduitAI/dl4j-test-resources/archive/master.zip
            unzip master.zip
            echo "Extracted test resources"
             cd dl4j-test-resources-master
            mvn clean install -DskipTests

        - uses: actions/checkout@v2
        - name: Run tests
          shell: cmd
          run: |
            set MSYSTEM=MINGW64
            call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
             set "PATH=C:\msys64\usr\bin;%PATH%"
            mvn -Ptestresources-Djavacpp.platform=windows-x86_64 -libnd4j.platform=windows-x86_64 -Ptest-nd4j-native -Dlibnd4j.chip=cpu clean install -DskipTests

  windows-x86_64-cuda-11-2:
    runs-on: windows-2019
    steps:
      - name: Install and run tests
        shell: cmd
        run: |
          echo Installing MSYS2
          C:\msys64\usr\bin\bash -lc "pacman -S --needed --noconfirm base-devel git tar pkg-config unzip p7zip zip autoconf autoconf-archive automake make patch gnupg wget"
          C:\msys64\usr\bin\bash -lc "pacman -S --needed --noconfirm mingw-w64-x86_64-nasm mingw-w64-x86_64-toolchain mingw-w64-x86_64-libtool mingw-w64-x86_64-gcc mingw-w64-i686-gcc mingw-w64-x86_64-gcc-fortran mingw-w64-i686-gcc-fortran mingw-w64-x86_64-libwinpthread-git mingw-w64-i686-libwinpthread-git mingw-w64-x86_64-SDL mingw-w64-i686-SDL mingw-w64-x86_64-protobuf mingw-w64-x86_64-ragel"
          echo Installing CUDA, cuDNN, etc
          wget  https://developer.download.nvidia.com/compute/cuda/11.2.1/local_installers/cuda_11.2.1_461.09_win10.exe
          wget  https://developer.download.nvidia.com/compute/redist/cudnn/v8.1.0/cudnn-11.2-windows-x64-v8.1.0.77.zip
          cuda_11.2.1_461.09_win10.exe -s
          unzip cudnn-11.2-windows-x64-v8.1.0.77.zip
          move cuda\bin\*.dll "%ProgramFiles%\NVIDIA GPU Computing Toolkit\CUDA\v11.2\bin"
          move cuda\include\*.h "%ProgramFiles%\NVIDIA GPU Computing Toolkit\CUDA\v11.2\include"
                move cuda\lib\x64\*.lib "%ProgramFiles%\NVIDIA GPU Computing Toolkit\CUDA\v11.2\lib\x64"
          set "PATH=C:\msys64\usr\bin;%PATH%"
          echo "Installing Windows SDK 8.1"
          wget -O  sdksetup.exe https://go.microsoft.com/fwlink/p/?LinkId=323507
          .\sdksetup.exe /features OptionId.WindowsDesktopSoftwareDevelopmentKit OptionId.NetFxSoftwareDevelopmentKit /quiet
          echo "Removing broken stuff from WSL and MSYS2"
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          set MSYSTEM=MINGW64
          set "CUDA_PATH=%ProgramFiles%\NVIDIA GPU Computing Toolkit\CUDA\v11.2"
          set "CUDA_PATH_V11_2=%ProgramFiles%\NVIDIA GPU Computing Toolkit\CUDA\v11.2"
          set "PATH=C:\msys64\usr\bin;%ProgramFiles%\NVIDIA GPU Computing Toolkit\CUDA\v11.2\bin;%ProgramFiles%\NVIDIA GPU Computing Toolkit\CUDA\v11.2\libnvvp;%PATH%"
          echo "CUDA Version 11.2.182" >"%ProgramFiles%\NVIDIA GPU Computing Toolkit\CUDA\v11.2\version.txt"
          set PATH="C:\msys64\usr\bin;%CUDA_PATH%\bin\";%PATH%
          echo "Attempting to use path %PATH%"
          nvcc --version
          wget -O master.zip https://github.com/KonduitAI/dl4j-test-resources/archive/master.zip
          unzip master.zip
          echo "Extracted test resources"
           cd dl4j-test-resources-master
          mvn clean install -DskipTests

      - uses: actions/checkout@v2
      - name: Run tests
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          set MSYSTEM=MINGW64
          set "CUDA_PATH=%ProgramFiles%\NVIDIA GPU Computing Toolkit\CUDA\v11.2"
          set "CUDA_PATH_V11_2=%ProgramFiles%\NVIDIA GPU Computing Toolkit\CUDA\v11.2"
          set "PATH=C:\msys64\usr\bin;%ProgramFiles%\NVIDIA GPU Computing Toolkit\CUDA\v11.2\bin;%ProgramFiles%\NVIDIA GPU Computing Toolkit\CUDA\v11.2\libnvvp;%PATH%"
          echo "CUDA Version 11.2.182" >"%ProgramFiles%\NVIDIA GPU Computing Toolkit\CUDA\v11.2\version.txt"
          set PATH="C:\msys64\usr\bin;%CUDA_PATH%\bin\";%PATH%
          echo "Attempting to use path %PATH%"
          nvcc --version
          mvn -Ptestresources-Djavacpp.platform=windows-x86_64 -libnd4j.platform=windows-x86_64 -Pcuda -Dlibnd4j.chip=cuda -Pcuda clean install -DskipTests



  mac-x86_64:
      runs-on: macos-10.15
      steps:
        - uses: actions/checkout@v2
        - name: Install and run tests
          shell: bash
          run: |
            brew install unzip  ccache gcc swig autoconf-archive automake cmake libomp libtool libusb ant maven nasm xz pkg-config sdl gpg1 bison flex perl ragel binutils gradle gmp isl libmpc mpfr wget
            wget -O master.zip https://github.com/KonduitAI/dl4j-test-resources/archive/master.zip
            unzip master.zip
            echo "Extracted test resources"
            cd dl4j-test-resources-master && mvn clean install -DskipTests
            cd ..
            mvn -Ptestresources-Djavacpp.platform=macosx-x86_64 -libnd4j.platform=macosx-x86_64 -Ptest-nd4j-native -Dlibnd4j.chip=cpu clean install -DskipTests

